from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states.states_create_hero import CreateHero
from archetype.specifications import specifications_choice
import textwrap

async def specifications_hero(router):
    @router.message(CreateHero.choosing_specifications)
    async def specifications_chosen(message: Message, state: FSMContext):
        try:
            data = await state.get_data()
            data_choice_specifications = specifications_choice(archetype=data['archetype'])
            choice_user = message.text

            Power = int(data_choice_specifications[1])
            Agility = int(data_choice_specifications[2])
            Luck = int(data_choice_specifications[3])
            Cunning = int(data_choice_specifications[4])
            Charm = int(data_choice_specifications[5])

            choice_user = int(choice_user)

            match choice_user:
                case 1:
                    if Power != 2:
                        Power += 1
                    else:
                        await message.answer("‚ö†Ô∏è <b>–ú–æ—â—å</b> —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (2)", parse_mode="HTML")
                        return
                case 2:
                    if Agility != 2:
                        Agility += 1
                    else:
                        await message.answer("‚ö†Ô∏è <b>–°–Ω–æ—Ä–æ–≤–∫–∞</b> —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (2)", parse_mode="HTML")
                        return
                case 3:
                    if Luck != 2:
                        Luck += 1
                    else:
                        await message.answer("‚ö†Ô∏è <b>–£–¥–∞—á–∞</b> —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (2)", parse_mode="HTML")
                        return
                case 4:
                    if Cunning != 2:
                        Cunning += 1
                    else:
                        await message.answer("‚ö†Ô∏è <b>–•–∏—Ç—Ä–æ—Å—Ç—å</b> —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (2)", parse_mode="HTML")
                        return
                case 5:
                    if Charm != 2:
                        Charm += 1
                    else:
                        await message.answer("‚ö†Ô∏è <b>–®–∞—Ä–º</b> —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (2)", parse_mode="HTML")
                        return
                case _:
                    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5", parse_mode="HTML")
                    return

            await state.update_data({
                'power': Power,
                'agility': Agility,
                'luck': Luck,
                'cunning': Cunning,
                'charm': Charm
            })
            await state.set_state(CreateHero.getting_reputation)

            await message.answer(
                textwrap.dedent(f"""
                üåü *–ö–∞–∫–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–æ–º–æ–≥–ª–∏?* üåü
                +2 –æ—á–∫–∞ –ø—Ä–µ—Å—Ç–∏–∂–∞
                
                üìå –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ *–æ–¥–Ω—É —Ü–∏—Ñ—Ä—É* –æ—Ç 1 –¥–æ 4:
                
                1Ô∏è‚É£ –ú–∞—Ä–∫–∏—Å–∞—Ç
                2Ô∏è‚É£ –ö—Ä—ã–ª–∞—Ç—ã–µ –¥–∏–Ω–∞—Å—Ç–∏–∏
                3Ô∏è‚É£ –õ–µ—Å–Ω–æ–π —Å–æ—é–∑
                4Ô∏è‚É£ –û–±–∏—Ç–∞—Ç–µ–ª–∏ –õ–µ—Å–∞
                """),
                parse_mode="Markdown"
            )

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4", parse_mode="HTML")