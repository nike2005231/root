from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states.states_create_hero import CreateHero
from archetype.motives import motives_choice
from archetype.personality import personality_choice
from archetype.specifications import specifications_choice
import textwrap

async def motive_hero(router):
    @router.message(CreateHero.choosing_motives)
    async def motives_chosen(message: Message, state: FSMContext):
        try:
            data = await state.get_data()
            data_choice_motive = motives_choice(archetype=data['archetype'])
            data_choice_personality = personality_choice(archetype=data['archetype'])
            choice_user = message.text
            parts = choice_user.split()
            if len(parts) != 2:
                await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!\n–ü—Ä–∏–º–µ—Ä: <b>1 3</b>", parse_mode="HTML")
                return    

            num1, num2 = int(parts[0]), int(parts[1])

            if not (1 <= num1 <= 4) or not (1 <= num2 <= 4):
                await message.answer("‚ùå –¶–∏—Ñ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 4!\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
                return
            
            if num1 == num2:
                await message.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –º–æ—Ç–∏–≤–∞!\n–£–∫–∞–∂–∏ —Ä–∞–∑–Ω—ã–µ —Ü–∏—Ñ—Ä—ã:")
                return

            finished_text = f"{data_choice_motive[num1]}\n\n{data_choice_motive[num2]}"
            await state.update_data(motives=finished_text)
            await state.set_state(CreateHero.choosing_personality)

            await message.answer(
                textwrap.dedent(f"""
                ‚ú® *–í—ã–±–µ—Ä–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É* ‚ú®
                
                üîπ–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ *–û–î–ù–£ —Ü–∏—Ñ—Ä—É* –æ—Ç 1 –¥–æ 2:
                üîπ–û—á–∏—Å—Ç–∏—Ç–µ —à–∫–∞–ª—É –∏—Å—Ç–æ—â–µ–Ω–∏—è:

                1Ô∏è‚É£ {data_choice_personality[1]}
                2Ô∏è‚É£ {data_choice_personality[2]}
                """),
                parse_mode="Markdown"
            )

        except ValueError:
            await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: <b>2 4</b>", parse_mode="HTML")

    @router.message(CreateHero.choosing_personality)
    async def personality_chosen(message: Message, state: FSMContext):
        try:
            data = await state.get_data()
            data_choice_personality = personality_choice(archetype=data['archetype'])
            data_choice_specifications = specifications_choice(archetype=data['archetype'])
            choice_user = message.text
            if int(choice_user) not in (1, 2):
                await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –≤ —Ä–µ–Ω–∂–µ –æ—Ç 1 –¥–æ 2!\n–ü—Ä–∏–º–µ—Ä: <b>1</b>", parse_mode="HTML")
                return    

            num = int(choice_user)

            finished_text = f"{data_choice_personality[num]}"
            await state.update_data(personality=finished_text)
            await state.set_state(CreateHero.choosing_specifications)

            await message.answer(
                "üí™ *–£–õ–£–ß–®–ï–ù–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò*\n\n"
                "–í—ã–±–µ—Ä–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 1Ô∏è‚É£ –¥–æ 5Ô∏è‚É£ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:\n"
                "‚ûï –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å +1 –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ\n"
                "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 2 (–µ—Å–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ)\n\n"
                "üî¢ *–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:*\n\n"
                f"üéØ *–í–ê–®–ò –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò* üéØ\n"
                f"{textwrap.dedent(data_choice_specifications[0])}",
                parse_mode="Markdown"
            )

        except ValueError:
            await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: <b>2</b>", parse_mode="HTML")