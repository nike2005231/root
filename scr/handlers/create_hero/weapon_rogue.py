from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states.states_create_hero import CreateHero
from archetype.rogue_skills import rouge_skill_choice
from archetype.weapon_skills import weapon_skill_choice
from archetype.moves import moves_choice
import textwrap

async def weapon_rogue_skills(router):    
    @router.message(CreateHero.recording_receptions)
    async def recording_receptions(message: Message, state: FSMContext):
        try:
            data = await state.get_data()
            data_rouge_skill = rouge_skill_choice(data['archetype'].lower())
            data_weapon_skill = weapon_skill_choice(data['archetype'].lower())
            choice_user = list(map(int, message.text.split()))
            
            if len(choice_user) != len(set(choice_user)):
                await message.answer("‚ùå –í—Å–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏!")
                return
                
            if data['archetype'].lower() == '—Å—É–¥—å—è':
                if len(choice_user) != 1:
                    await message.answer("‚ùå –°—É–¥—å—è –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ!\n–ü—Ä–∏–º–µ—Ä: <b>1</b>", parse_mode="HTML")
                    return
            elif data['archetype'].lower() == '–≤–æ—Ä':
                if len(choice_user) != 4:
                    await message.answer("‚ùå –í–æ—Ä –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ç—ã—Ä–µ —á–∏—Å–ª–∞!\n–ü—Ä–∏–º–µ—Ä: <b>1 2 3 4</b>", parse_mode="HTML")
                    return
            
            max_skill_index = len(data_rouge_skill) - 1
            if any(x < 0 or x > max_skill_index for x in choice_user):
                await message.answer(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ {max_skill_index}!")
                return
                
            selected_skills = [data_rouge_skill[x] for x in choice_user]
            text_finish = '\n'.join(selected_skills)

            await state.update_data({'rogue_skills': text_finish})
            await state.set_state(CreateHero.choosing_weapon_skill)

            await message.answer(
                textwrap.dedent(f"""
                    ‚öîÔ∏è *–û—Ä—É–∂–µ–π–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ {data['archetype'].upper()}* ‚öîÔ∏è
                    
                    –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –Ω–∞–≤—ã–∫ –≤–ª–∞–¥–µ–Ω–∏—è –æ—Ä—É–∂–∏–µ–º:
                    
                    1Ô∏è‚É£ {data_weapon_skill[1]}
                    2Ô∏è‚É£ {data_weapon_skill[2]}
                    3Ô∏è‚É£ {data_weapon_skill[3]}
                    4Ô∏è‚É£ {data_weapon_skill[4]}
                    
                    ‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç *1* –¥–æ *4*
                    üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2")
                    """),
                    parse_mode="Markdown"
                )

        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏!")


    @router.message(CreateHero.choosing_weapon_skill)
    async def choosing_weapon_skill(message: Message, state: FSMContext):
        try:
            data = await state.get_data()
            data_weapon_skill = weapon_skill_choice(data['archetype'].lower())
            data_moves = moves_choice(data['archetype'].lower())
            choice_user = message.text.strip()

            if not choice_user.isdigit() or int(choice_user) not in {1, 2, 3, 4}:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –û–î–ù–û —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
                return
                
            choice = int(choice_user)
            text_finish = data_weapon_skill[choice]
            await state.update_data({'weapon_skill': text_finish})

            if data['archetype'].lower() != '—Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫':
                await message.answer(
                    textwrap.dedent(f"""
                    üé≠ *{data['archetype'].capitalize()} - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏ —Ö–æ–¥–∞* üé≠
                    
                    –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Å–æ–±—ã–µ —É–º–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞:
                    
                    1Ô∏è‚É£ {data_moves[1]}
                    2Ô∏è‚É£ {data_moves[2]}
                    3Ô∏è‚É£ {data_moves[3]}
                    4Ô∏è‚É£ {data_moves[4]}
                    5Ô∏è‚É£ {data_moves[5]}
                    6Ô∏è‚É£ {data_moves[6]}
                    
                    ‚ú® –í—ã–±–µ—Ä–∏—Ç–µ *—Ç—Ä–∏* —Ö–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
                    üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1 3 5")
                    üö® –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã–±–æ—Ä –±—É–¥–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º
                    """),
                    parse_mode="Markdown"
                )
            else:
                await message.answer(
                    textwrap.dedent(f"""
                    üõ†Ô∏è *–†–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫ - –≤–∞—à–∏ —É–º–µ–Ω–∏—è* üõ†Ô∏è

                    üì¶ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ:*
                    üëâ *–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤*: {data_moves[5]}
                    üëâ *–ü–æ—á–∏–Ω–∏—Ç—å*: {data_moves[6]}

                    ‚ûï *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ 1 —Ö–æ–¥:*
                    1Ô∏è‚É£ {data_moves[1]}
                    2Ô∏è‚É£ {data_moves[2]}
                    3Ô∏è‚É£ {data_moves[3]}
                    4Ô∏è‚É£ {data_moves[4]}

                    ‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4
                    –ü—Ä–∏–º–µ—Ä: "3"
                    """),
                    parse_mode="Markdown"
                )
            await state.set_state(CreateHero.choosing_moves)
        except Exception as ex:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–≤—ã–∫–∞ –æ—Ä—É–∂–∏—è: {ex}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")