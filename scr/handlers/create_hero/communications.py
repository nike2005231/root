from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states.states_create_hero import CreateHero
from archetype.communications import communications_choice
import textwrap

async def communications_hero(router):      
    @router.message(CreateHero.choosing_communications)
    async def choosing_communications(message: Message, state: FSMContext):
        try:
            data = await state.get_data()
            archetype = data.get("archetype", "").lower()

            data_communications = communications_choice(archetype)
            roles, description_1, description_2 = data_communications
            role_1, role_2 = roles

            names = message.text.strip().split()

            if len(names) != 2:
                await message.answer(
                    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *—Ä–æ–≤–Ω–æ –¥–≤–∞ –∏–º–µ–Ω–∏* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: `–°–∞—à–∞ –í–ª–∞–¥`",
                    parse_mode="Markdown"
                )
                return

            name_1, name_2 = names

            communications_full = textwrap.dedent(f"""
                {name_1} ‚Äî {role_1}
                {name_2} ‚Äî {role_2}

                {description_1}

                {description_2}
            """).strip()

            await state.update_data({'communications': communications_full})

            await state.set_state(CreateHero.getting_photo)

            await message.answer(
                textwrap.dedent(f"""
                    üåü *–§–ò–ù–ê–õ–¨–ù–´–ô –®–ê–ì: –§–û–¢–û –ü–ï–†–°–û–ù–ê–ñ–ê* üåü
                    
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
                    
                    üì∏ –≠—Ç–æ –±—É–¥–µ—Ç –µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º
                    üñºÔ∏è –ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                    ‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤–∞—à–µ–≥–æ –≥–µ—Ä–æ—è!
                """),
                parse_mode="Markdown"
            )

        except KeyError:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ö–µ—Ç–∏–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ö–µ—Ç–∏–ø –∑–∞–Ω–æ–≤–æ.")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")