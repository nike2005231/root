from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states.states_create_hero import CreateHero
from archetype.communications import communications_choice
from keyboards.keyboards import communications_keyboard
from aiogram import F
import textwrap

async def communications_hero(router):
    async def final(message: Message, state: FSMContext):
        await state.set_state(CreateHero.getting_photo)

        await message.answer(
            textwrap.dedent(f"""
                üåü *–§–ò–ù–ê–õ–¨–ù–´–ô –®–ê–ì: –§–û–¢–û –ü–ï–†–°–û–ù–ê–ñ–ê* üåü
                
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
                
                üì∏ –≠—Ç–æ –±—É–¥–µ—Ç –µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º
                üñºÔ∏è –ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                ‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤–∞—à–µ–≥–æ –≥–µ—Ä–æ—è!
            """),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown"
        )


    @router.message(F.text == "üë• –î—Ä—É–≥")
    async def chosing_friend(message: Message, state: FSMContext):
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è –¥—Ä—É–≥–∞",
            reply_markup=communications_keyboard()
        )
        data = await state.get_data()
        if data.get('communications_1'):
            await state.set_state(CreateHero.choosing_communications_friend_2)
        else:
            await state.set_state(CreateHero.choosing_communications_friend_1)

    @router.message(CreateHero.choosing_communications_friend_1)
    async def add_friend(message: Message, state: FSMContext):
        await state.update_data({'communications_1':{'–¥—Ä—É–≥':f' - {message.text.lower()}'}})
        await message.answer(
            "–ü–µ—Ä–≤–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä—É—é —Å–≤—è–∑—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
            reply_markup=communications_keyboard()
        )
        await state.set_state(CreateHero.choosing_communications)

    @router.message(CreateHero.choosing_communications_friend_2)
    async def add_friend(message: Message, state: FSMContext):
        await state.update_data({'communications_2':{'–¥—Ä—É–≥':f' - {message.text.lower()}'}})
        await final(message=message, state=state)
    
    
    @router.message(F.text == "üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫")
    async def choosing_guardian(message: Message, state: FSMContext):
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è –∑–∞—â–∏—Ç–Ω–∏–∫–∞",
            reply_markup=communications_keyboard()
        )
        data = await state.get_data()
        if data.get('communications_1'):
            await state.set_state(CreateHero.choosing_communications_guardian_2)
        else:
            await state.set_state(CreateHero.choosing_communications_guardian_1)

    @router.message(CreateHero.choosing_communications_guardian_1)
    async def add_guardian(message: Message, state: FSMContext):
        await state.update_data({'communications_1': {'–∑–∞—â–∏—Ç–Ω–∏–∫': f' - {message.text.lower()}'}})
        await message.answer(
            "–ü–µ—Ä–≤–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä—É—é —Å–≤—è–∑—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
            reply_markup=communications_keyboard()
        )
        await state.set_state(CreateHero.choosing_communications)

    @router.message(CreateHero.choosing_communications_guardian_2)
    async def add_guardian_2(message: Message, state: FSMContext):
        await state.update_data({'communications_2': {'–∑–∞—â–∏—Ç–Ω–∏–∫': f' - {message.text.lower()}'}})
        await final(message=message, state=state)


    @router.message(F.text == "‚ù§Ô∏è –ü–∞—Ä—Ç–Ω—ë—Ä")
    async def choosing_partner(message: Message, state: FSMContext):
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞",
            reply_markup=communications_keyboard()
        )
        data = await state.get_data()
        if data.get('communications_1'):
            await state.set_state(CreateHero.choosing_communications_partner_2)
        else:
            await state.set_state(CreateHero.choosing_communications_partner_1)

    @router.message(CreateHero.choosing_communications_partner_1)
    async def add_partner(message: Message, state: FSMContext):
        await state.update_data({'communications_1': {'–ø–∞—Ä—Ç–Ω—ë—Ä': f' - {message.text.lower()}'}})
        await message.answer(
            "–ü–µ—Ä–≤–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä—É—é —Å–≤—è–∑—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
            reply_markup=communications_keyboard()
        )
        await state.set_state(CreateHero.choosing_communications)

    @router.message(CreateHero.choosing_communications_partner_2)
    async def add_partner_2(message: Message, state: FSMContext):
        await state.update_data({'communications_2': {'–ø–∞—Ä—Ç–Ω—ë—Ä': f' - {message.text.lower()}'}})
        await final(message=message, state=state)


    @router.message(F.text == "üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª")
    async def choosing_professional(message: Message, state: FSMContext):
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞",
            reply_markup=communications_keyboard()
        )
        data = await state.get_data()
        if data.get('communications_1'):
            await state.set_state(CreateHero.choosing_communications_pro_2)
        else:
            await state.set_state(CreateHero.choosing_communications_pro_1)

    @router.message(CreateHero.choosing_communications_pro_1)
    async def add_professional(message: Message, state: FSMContext):
        await state.update_data({'communications_1': {'–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª': f' - {message.text.lower()}'}})
        await message.answer(
            "–ü–µ—Ä–≤–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä—É—é —Å–≤—è–∑—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
            reply_markup=communications_keyboard()
        )
        await state.set_state(CreateHero.choosing_communications)

    @router.message(CreateHero.choosing_communications_pro_2)
    async def add_professional_2(message: Message, state: FSMContext):
        await state.update_data({'communications_2': {'–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª': f' - {message.text.lower()}'}})
        await final(message=message, state=state)


    @router.message(F.text == "üè† –°–µ–º—å—è")
    async def choosing_family(message: Message, state: FSMContext):
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è —á–ª–µ–Ω–∞ —Å–µ–º—å–∏",
            reply_markup=communications_keyboard()
        )
        data = await state.get_data()
        if data.get('communications_1'):
            await state.set_state(CreateHero.choosing_communications_family_2)
        else:
            await state.set_state(CreateHero.choosing_communications_family_1)

    @router.message(CreateHero.choosing_communications_family_1)
    async def add_family(message: Message, state: FSMContext):
        await state.update_data({'communications_1': {'—Å–µ–º—å—è': f' - {message.text.lower()}'}})
        await message.answer(
            "–ü–µ—Ä–≤–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä—É—é —Å–≤—è–∑—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
            reply_markup=communications_keyboard()
        )
        await state.set_state(CreateHero.choosing_communications)

    @router.message(CreateHero.choosing_communications_family_2)
    async def add_family_2(message: Message, state: FSMContext):
        await state.update_data({'communications_2': {'—Å–µ–º—å—è': f' - {message.text.lower()}'}})
        await final(message=message, state=state)


    @router.message(F.text == "üëÄ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å")
    async def choosing_watcher(message: Message, state: FSMContext):
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è",
            reply_markup=communications_keyboard()
        )
        data = await state.get_data()
        if data.get('communications_1'):
            await state.set_state(CreateHero.choosing_communications_watcher_2)
        else:
            await state.set_state(CreateHero.choosing_communications_watcher_1)

    @router.message(CreateHero.choosing_communications_watcher_1)
    async def add_watcher(message: Message, state: FSMContext):
        await state.update_data({'communications_1': {'–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å': f' - {message.text.lower()}'}})
        await message.answer(
            "–ü–µ—Ä–≤–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä—É—é —Å–≤—è–∑—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
            reply_markup=communications_keyboard()
        )
        await state.set_state(CreateHero.choosing_communications)

    @router.message(CreateHero.choosing_communications_watcher_2)
    async def add_watcher_2(message: Message, state: FSMContext):
        await state.update_data({'communications_2': {'–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å': f' - {message.text.lower()}'}})
        await final(message=message, state=state)