from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states.states_create_hero import CreateHero
from archetype.motives import motives_choice
import textwrap

async def global_informations_hero(router):
    @router.message(CreateHero.choosing_archetype)
    async def archetype_chosen(message: Message, state: FSMContext):
        if message.text.lower() in ("–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç", "—Å—É–¥—å—è", "–Ω–∞–ª–µ—Ç—á–∏–∫", "—Å–ª–µ–¥–æ–ø—ã—Ç", "—Ä–æ–Ω–∏–Ω", "–ø–æ–¥–∂–∏–≥–∞—Ç–µ–ª—å", "–≤–æ—Ä", "—Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫", "—Å–∫–∏—Ç–∞–ª–µ—Ü"):
            await state.update_data(archetype=message.text)
            await state.set_state(CreateHero.filling_name)
            await message.answer(
                "üéâ *–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –∞—Ä—Ö–µ—Ç–∏–ø–∞!* üéâ\n\n"
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É—Ç—å *{message.text}*! üåü –¢–µ–ø–µ—Ä—å –≤–∞—à –≥–µ—Ä–æ–π –≥–æ—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è.\n\n"
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–µ—Å—è –∏–º—è –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ü¶∏‚Äç‚ôÇÔ∏è",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="markdown"
            )
        elif message.text.lower() == '—Å—É—Ç–∏–Ω–µ—Ä':
            await message.answer(
                "üé≠ <b>–°—É—Ç–∏–Ω–µ—Ä?</b> üé≠\n\n"
                "–ù–∏—Ö—É—è —Ç—ã —à–∞–ª—É–Ω–∏—à–∫–∞! üòà\n"
                f"–ê —Ç–µ–ø–µ—Ä—å-–∫–∞ –≤—ã–±–µ—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∞—Ä—Ö–µ—Ç–∏–ø, {message.chat.first_name}. üíÖ\n\n", parse_mode='html'
            )
            return
        else:
            await message.answer('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ö–µ—Ç–∏–ø –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö\n\n'                
            "‚Ä¢ üéí *–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç* ‚Äî —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º –∏ –Ω–æ–≤—ã–º —Å–≤—è–∑—è–º\n"
            "‚Ä¢ ‚öñÔ∏è *–°—É–¥—å—è* ‚Äî —Å—Ç–æ–∏—Ç –∑–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –∏–ª–∏ –∫–∞—Ä–∞–µ—Ç\n"
            "‚Ä¢ ü™ì *–ù–∞–ª—ë—Ç—á–∏–∫* ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ (—á–µ—Ä–µ–∑ –µ)\n"
            "‚Ä¢ üêæ *–°–ª–µ–¥–æ–ø—ã—Ç* ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω, –∑–∞–¥–∞—ë—Ç –Ω–µ—É–¥–æ–±–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ üó°Ô∏è *–†–æ–Ω–∏–Ω* ‚Äî —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–π –º—Å—Ç–∏—Ç–µ–ª—å –∏–ª–∏ —Å—Ç–æ–π–∫–∏–π –≤–æ–∏–Ω\n"
            "‚Ä¢ üî• *–ü–æ–¥–∂–∏–≥–∞—Ç–µ–ª—å* ‚Äî —Ä–∞–∑—Ä—É—à–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏ –º–∞–Ω–∏–ø—É–ª–∏—Ä—É–µ—Ç\n"
            "‚Ä¢ üé≠ *–í–æ—Ä* ‚Äî —Ö–∏—Ç—ë—Ä, –∏–∑–≤–æ—Ä–æ—Ç–ª–∏–≤ –∏ –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ —É–¥–∞—á—É\n"
            "‚Ä¢ üîß *–†–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫* ‚Äî —Ç–≤–æ—Ä–∏—Ç –∏ —Å–æ–∑–∏–¥–∞–µ—Ç\n"
            "‚Ä¢ üåç *–°–∫–∏—Ç–∞–ª–µ—Ü* ‚Äî –∏—â–µ—Ç –Ω–æ–≤–æ–µ –∏ –∏—Å—Å–ª–µ–¥—É–µ—Ç –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–µ\n"
            "‚Ä¢ ü§µ *–°—É—Ç–∏–Ω–µ—Ä* ‚Äî —Ç–æ–∂–µ –∏—â–µ—Ç –Ω–æ–≤–æ–µ –∏ –∏—Å—Å–ª–µ–¥—É–µ—Ç –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–µ\n\n",
            parse_mode='Markdown'
            )

    @router.message(CreateHero.filling_name)
    async def name_filled(message: Message, state: FSMContext):
        await state.update_data(name=message.text.lower())
        await state.set_state(CreateHero.choosing_species)
        await message.answer(
            "üåø *–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è!* üåø\n\n"
            f"–¢–µ–ø–µ—Ä—å <b>{message.text}</b> –æ–±—Ä–µ—Ç–∞–µ—Ç —Ñ–æ—Ä–º—É...\n\n"
            "ü¶â <i>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</i>:\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö: –ª–∏—Å–∞, –∫—Ä–æ–ª–∏–∫, –º—ã—à—å\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–∏–¥—É–º–∞—Ç—å —á—Ç–æ-—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ!\n\n"
            "‚ú® <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç:</b>",
            parse_mode="HTML"
        )

    @router.message(CreateHero.choosing_species)
    async def species_chosen(message: Message, state: FSMContext):
        await state.update_data(species=message.text)
        await state.set_state(CreateHero.choosing_distinctive_features)
        await message.answer(
            "üé≠ *–í–Ω–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞* üé≠\n\n"
            "–û–ø–∏—à–∏—Ç–µ <b>3 –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã</b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "–ü—Ä–∏–º–µ—Ä: <i>¬´–º—É–∂—Å–∫–æ–π, —è—Ä–∫–∏–π, —Å –º–µ–¥–∞–ª—å–æ–Ω–æ–º¬ª</i>\n\n"
            "–ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–µ—Å—è!",
            parse_mode="HTML"
        )

    @router.message(CreateHero.choosing_distinctive_features)
    async def features_chosen(message: Message, state: FSMContext):
        await state.update_data(features=message.text)
        await state.set_state(CreateHero.choosing_behavior)
        await message.answer(
            "üåÄ *–ú–∞–Ω–µ—Ä–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è* üåÄ\n\n"
            "–ö–∞–∫–æ–µ —É –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ <b>–æ—Å–Ω–æ–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</b>?\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>¬´–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π, –Ω–æ —Å –∂–µ–ª–µ–∑–Ω–æ–π –≤–æ–ª–µ–π¬ª</i>\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:",
            parse_mode="HTML"
        )

    @router.message(CreateHero.choosing_behavior)
    async def behavior_chosen(message: Message, state: FSMContext):
        await state.update_data(behavior=message.text)
        await state.set_state(CreateHero.choosing_home)
        await message.answer(
            "üè° *–ì–¥–µ –≤–∞—à –¥–æ–º?* üè°\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
            "‚Ä¢ –ó–∞—Ç–µ—Ä—è–Ω–Ω–∞—è –ø–æ–ª—è–Ω–∞ –≤ –õ–µ—Å—É\n"
            "‚Ä¢ –î–∞–ª—ë–∫–∏–µ –∑–µ–º–ª–∏ –∑–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º\n"
            "‚Ä¢ –ò–ª–∏ —á—Ç–æ-—Ç–æ —Å–æ–≤—Å–µ–º –Ω–µ–æ–±—ã—á–Ω–æ–µ...\n\n"
            "üìú –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é:",
            parse_mode="HTML"
        )

    @router.message(CreateHero.choosing_home)
    async def home_chosen(message: Message, state: FSMContext):
        await state.update_data(home=message.text)
        await state.set_state(CreateHero.choosing_reason)
        await message.answer(
            "üå™Ô∏è *–ü–æ—á–µ–º—É –≤—ã —Å—Ç–∞–ª–∏ –±—Ä–æ–¥—è–≥–æ–π?* üå™Ô∏è\n\n"
            "–û–ø–∏—à–∏—Ç–µ <b>–ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç</b>:\n"
            "‚Ä¢ –ë—ã—Ç—å –º–æ–∂–µ—Ç, –≤—ã –±–µ–∂–∏—Ç–µ –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ?\n"
            "‚Ä¢ –ò–ª–∏ –∏—â–µ—Ç–µ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ?\n\n"
            "üí¨ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –≤ –æ–¥–Ω–æ–º-–¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö:",
            parse_mode="HTML"
        )

    @router.message(CreateHero.choosing_reason)
    async def reason_chosen(message: Message, state: FSMContext):
        await state.update_data(reason=message.text)
        await state.set_state(CreateHero.choosing_left_behind)
        await message.answer(
            "üíî *–ö–æ–≥–æ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏?* üíî\n\n"
            "–û–ø–∏—à–∏—Ç–µ <b>—Å–∞–º—É—é –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—É—é –ø–æ—Ç–µ—Ä—é</b>:\n"
            "‚Ä¢ –õ—é–±–æ–≤—å –≤—Å–µ–π –∂–∏–∑–Ω–∏\n"
            "‚Ä¢ –£—á–µ–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–∞–ª\n"
            "‚Ä¢ –ò–ª–∏ –º–æ–∂–µ—Ç, —Ü–µ–ª—É—é —Å–µ–º—å—é...\n\n"
            "üñãÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –ª–∏—á–Ω–æ–µ:",
            parse_mode="HTML"
        )
    
    @router.message(CreateHero.choosing_left_behind)
    async def left_behind_chosen(message: Message, state: FSMContext):
        await state.update_data(left_behind=message.text)
        await state.set_state(CreateHero.choosing_motives)
        data = await state.get_data()
        data_choice_motive = motives_choice(archetype=data['archetype'])
        
        await message.answer(
            textwrap.dedent(f"""
            üî• *–í—ã–±–µ—Ä–∏ –¥–≤–∞ –º–æ—Ç–∏–≤–∞* üî•
            
            –í–≤–µ–¥–∏ –¥–≤–µ —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 3)
            
            üí° *–†–∞–∑–≤–∏—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç*:

            1Ô∏è‚É£ {data_choice_motive[1]}
            2Ô∏è‚É£ {data_choice_motive[2]}
            3Ô∏è‚É£ {data_choice_motive[3]}
            4Ô∏è‚É£ {data_choice_motive[4]}
            """),
            parse_mode="Markdown"
        )