from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states.states_create_hero import CreateHero
from archetype.moves import moves_choice
from archetype.communications import communications_choice
from keyboards.keyboards import communications_keyboard
import textwrap

async def changing_data(state, message):

    data = await state.get_data()

    if '–ù–∞—á–∏—Ç–∞–Ω–Ω—ã–π' in data['moves']:
        set_parm = data['cunning'] + 1
        await state.update_data({'cunning': set_parm })

    elif '–ó–¥–æ—Ä–æ–≤—è–∫' in data['moves']:
        set_parm = data['power'] + 1
        await state.update_data({'power': set_parm })

    elif '–ë—ã—Å—Ç—Ä—ã–µ –Ω–æ–≥–∏ –∏ –ª–æ–≤–∫–∏–µ —Ä—É–∫–∏' in data['moves']:
        set_parm = data['agility'] + 1
        await state.update_data({'agility': set_parm })

    elif '–í—Å–µ–≥–¥–∞ –Ω–∞—á–µ–∫—É' in data['moves']:
        set_parm = data['cunning'] + 1
        await state.update_data({'cunning': set_parm })

    elif '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ—Ä' in data['moves']:
        set_parm = data['agility'] + 1
        await state.update_data({'agility': set_parm })

    elif '–ù–µ —Å—Ç—Ä–µ–ª—è–π—Ç–µ –≤ –≥–æ–Ω—Ü–∞!' in data['moves']:
        set_parm = data['rogue_skills'] + '\n' + '–ü–æ–¥–¥–µ–ª–∫–∞'
        await state.update_data({'rogue_skills': set_parm })
    
    elif '–í—Å–µ–≥–¥–∞ –ø—Ä–∏ –æ—Ä—É–∂–∏–∏' in data['moves']:
        set_parm = data['weapon_skill'] + '\n' + '–ò–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ'
        await state.update_data({'weapon_skill': set_parm })

    elif '–û—Ç–≤–ª–µ–∫–∞—é—â–∏–π –º–∞–Ω—ë–≤—Ä!' in data['moves']:
        set_parm = data['rogue_skills'] + '\n' + '–°–ª–∞–±–æ–µ –º–µ—Å—Ç–æ'
        await state.update_data({'rogue_skills': set_parm })

    elif '–ü–µ—Å–æ–∫ –∏–∑ –∫–∞—Ä–º–∞–Ω–∞' in data['moves']:
        set_parm = data['weapon_skill'] + '\n' + '–°–±–∏–≤–∞–Ω–∏–µ —Å —Ç–æ–ª–∫—É'
        await state.update_data({'weapon_skill': set_parm })

    elif '–ì—Ä—è–∑–Ω—ã–π –±–æ–µ—Ü' in data['moves']:
        set_parm = data['weapon_skill'] + '\n' + '–ñ–µ—Å—Ç–æ–∫–∏–π —É–¥–∞—Ä' + '\n' + '–û–±–µ–∑–æ—Ä—É–∂–∏–≤–∞–Ω–∏–µ'
        await state.update_data({'weapon_skill': set_parm })

    elif '–ì—Ä—è–∑–Ω—ã–π –±–æ–µ—Ü' in data['moves']:
        set_parm = data['weapon_skill'] + '\n' + '–ñ–µ—Å—Ç–æ–∫–∏–π —É–¥–∞—Ä' + '\n' + '–û–±–µ–∑–æ—Ä—É–∂–∏–≤–∞–Ω–∏–µ'
        await state.update_data({'weapon_skill': set_parm })

    elif '–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤' in data['moves']:
        await message.answer(
            "üîß –ü–æ–≥–æ–≤–æ—Ä–∏–º –ø—Ä–æ —Ö–æ–¥ - <b>–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:</b>\n\n"
            "–¢—É—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –µ–±–∞–Ω—É—Ç–∞—è, —á—Ç–æ –º–Ω–µ —Ä–µ–∞–ª—å–Ω–æ –≤–ø–∞–¥–ª—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, —á—Ç–æ –≤—ã —Ç–∞–º —Å–µ–±–µ –Ω–∞—Ö—É—è—Ä–∏—Ç–µ. "
            "–ü–æ—ç—Ç–æ–º—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–π–¥–∏—Ç–µ –≤ <b>–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</b> –∏ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, "
            "–∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ —ç—Ç–æ–º—É —Ö–æ–¥—É. üõ†Ô∏è\n\n"
            "<i>P.S. –î–∞, —è –∑–Ω–∞—é, —á—Ç–æ —ç—Ç–æ –∫–æ—Å—Ç—ã–ª—å. –î–∞, –º–Ω–µ –ø–æ—Ö—É–π. üòé</i>", parse_mode='html'
        )

async def moves_hero(router):        
    @router.message(CreateHero.choosing_moves)
    async def choosing_weapon_skill(message: Message, state: FSMContext):
        try:
            data = await state.get_data()
            data_moves = moves_choice(data['archetype'].lower())
            if data['archetype'].lower() == '—Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫':
                try:
                    choice = int(message.text)
                    if choice < 1 or choice > 4:
                        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
                        return
                    
                    text_finish = data_moves[5] + '\n' + data_moves[6]
                    text_finish += data_moves[choice]
                    await state.update_data({'moves': text_finish})
                    
                    
                except ValueError:
                    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
                    
            else:
                parts = message.text.split()
                if len(parts) != 3:
                    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ —Ç—Ä–∏ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 6 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
                    return
                    
                try:
                    choices = [int(x) for x in parts]
                except ValueError:
                    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 6 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
                    return
                    
                if any(x < 1 or x > 6 for x in choices):
                    await message.answer("‚ö†Ô∏è –í—Å–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 6.")
                    return
                    
                if len(choices) != len(set(choices)):
                    await message.answer("‚ö†Ô∏è –ß–∏—Å–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.")
                    return
                    
                text_finish = ''
                for choice in choices:
                    text_finish += data_moves[choice] + '\n'
                await state.update_data({'moves': text_finish})

            await state.set_state(CreateHero.choosing_communications)
            await changing_data(state=state, message=message)
            await message.answer(
                textwrap.dedent(f"""
                üß© *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–∏–ø —Å–≤—è–∑–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:*

                *üë• –î—Ä—É–≥:*  
                {communications_choice('–¥—Ä—É–≥')}

                *üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª:*  
                {communications_choice('–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª')}

                *üè† –°–µ–º—å—è:*  
                {communications_choice('—Å–µ–º—å—è')}

                *‚ù§Ô∏è –ü–∞—Ä—Ç–Ω—ë—Ä:*  
                {communications_choice('–ø–∞—Ä—Ç–Ω–µ—Ä')}

                *üëÄ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å:*  
                {communications_choice('–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å')}

                *üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫:*  
                {communications_choice('–∑–∞—â–∏—Ç–Ω–∏–∫')}
                """), 
                reply_markup=communications_keyboard(),
                parse_mode="Markdown", 
            )
            
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

