from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states.states_create_hero import CreateHero
from archetype.rogue_skills import rouge_skill_choice
from archetype.weapon_skills import weapon_skill_choice
import textwrap

async def reputations_hero(router):    
    @router.message(CreateHero.getting_reputation)
    async def reputation_handler(message: Message, state: FSMContext):
        try:
            data = await state.get_data()
            choice_user = int(message.text)
            
            if choice_user not in (1, 2, 3, 4):
                await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4!\n–ü—Ä–∏–º–µ—Ä: <b>1</b>", parse_mode="HTML")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¢–ï–ö–£–©–ò–ï –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            marquisate = data.get('marquisate_prestige_p', 0)
            winged = data.get('winged_dynasties_prestige_p', 0)
            forest = data.get('forest_alliance_prestige_p', 0)
            woodland = data.get('woodland_folk_prestige_p', 0)

            # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ—Ä–∞–∫—Ü–∏—é
            match choice_user:
                case 1:
                    marquisate += 2
                case 2:
                    winged += 2
                case 3:
                    forest += 2
                case 4:
                    woodland += 2

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è
            await state.update_data({
                'marquisate_prestige_p': marquisate,
                'winged_dynasties_prestige_p': winged,
                'forest_alliance_prestige_p': forest,
                'woodland_folk_prestige_p': woodland
            })

            await message.answer(
                textwrap.dedent(f"""
                üí¢ *–ö–∞–∫–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–∞–≤—Ä–µ–¥–∏–ª–∏?* üí¢
                -1 –æ—á–∫–∞ –ø—Ä–µ—Å—Ç–∏–∂–∞
                
                üìå –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ *–æ–¥–Ω—É —Ü–∏—Ñ—Ä—É* –æ—Ç 1 –¥–æ 4:
                
                1Ô∏è‚É£ –ú–∞—Ä–∫–∏–∑–∞—Ç
                2Ô∏è‚É£ –ö—Ä—ã–ª–∞—Ç—ã–µ –¥–∏–Ω–∞—Å—Ç–∏–∏
                3Ô∏è‚É£ –õ–µ—Å–Ω–æ–π —Å–æ—é–∑
                4Ô∏è‚É£ –û–±–∏—Ç–∞—Ç–µ–ª–∏ –õ–µ—Å–∞
                """),
                parse_mode="Markdown"
            )
            
            await state.set_state(CreateHero.take_reputation)

        except ValueError:
            await message.answer("‚ùå –í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n–ü—Ä–∏–º–µ—Ä: <b>2</b>", parse_mode="HTML")


    @router.message(CreateHero.take_reputation)
    async def faction_not_helped(message: Message, state: FSMContext):
        try:
            data = await state.get_data()
            choice_user = int(message.text) 
            data_weapon_skill = weapon_skill_choice(data['archetype'].lower())
            data_rouge_skill = rouge_skill_choice(data['archetype'].lower())
            
            if choice_user not in (1, 2, 3, 4):
                await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4!\n–ü—Ä–∏–º–µ—Ä: <b>1</b>", parse_mode="HTML")
                return    

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            marquisate_prestige_m = data.get('marquisate_prestige_m', 0)
            winged_dynasties_prestige_m = data.get('winged_dynasties_prestige_m', 0)
            forest_alliance_prestige_m = data.get('forest_alliance_prestige_m', 0)
            woodland_folk_prestige_m = data.get('woodland_folk_prestige_m', 0)

            marquisate = data.get('marquisate_prestige_p')
            winged = data.get('winged_dynasties_prestige_p')
            forest = data.get('forest_alliance_prestige_p')
            woodland = data.get('woodland_folk_prestige_p')

            match choice_user:
                case 1:
                    marquisate_prestige_m -= 1
                case 2:
                    winged_dynasties_prestige_m -= 1
                case 3:
                    forest_alliance_prestige_m -= 1
                case 4:
                    woodland_folk_prestige_m -= 1

            await state.update_data({
                'marquisate_prestige_m': marquisate_prestige_m,
                'winged_dynasties_prestige_m': winged_dynasties_prestige_m,
                'forest_alliance_prestige_m': forest_alliance_prestige_m,
                'woodland_folk_prestige_m': woodland_folk_prestige_m
            })
            
            roles = {'–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç':9, '—Å—É–¥—å—è':10, '–Ω–∞–ª–µ—Ç—á–∏–∫':9, '—Å–ª–µ–¥–æ–ø—ã—Ç':9, '—Ä–æ–Ω–∏–Ω':11, '–ø–æ–¥–∂–∏–≥–∞—Ç–µ–ª—å':8, '–≤–æ—Ä':6, '—Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫':8, '—Å–∫–∏—Ç–∞–ª–µ—Ü':9}
            await state.update_data({'money': roles[data['archetype'].lower()]})

            await message.answer(
                textwrap.dedent(f"""
                ‚úÖ *–†–µ–ø—É—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!* ‚úÖ

                –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:
                1Ô∏è‚É£ –ú–∞—Ä–∫–∏—Å–∞—Ç: {marquisate} | {marquisate_prestige_m}
                2Ô∏è‚É£ –ö—Ä—ã–ª–∞—Ç—ã–µ –¥–∏–Ω–∞—Å—Ç–∏–∏: {winged} | {winged_dynasties_prestige_m}
                3Ô∏è‚É£ –õ–µ—Å–Ω–æ–π —Å–æ—é–∑: {forest} | {forest_alliance_prestige_m}
                4Ô∏è‚É£ –û–±–∏—Ç–∞—Ç–µ–ª–∏ –õ–µ—Å–∞: {woodland} | {woodland_folk_prestige_m}
                """),
                parse_mode="Markdown"
            )
            
            if data['archetype'].lower() in ('—Å—É–¥—å—è', '–≤–æ—Ä'):
                await state.set_state(CreateHero.recording_receptions)
                await message.answer(
                    textwrap.dedent(f"""
                    üÉè *–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ {data['archetype'].lower()}* üÉè
                    
                    –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Å–æ–±—ã–µ –ø–ª—É—Ç–æ–≤—Å–∫–∏–µ –ø—Ä–∏–µ–º—ã:
                    
                    1Ô∏è‚É£ {data_rouge_skill[1]}
                    2Ô∏è‚É£ {data_rouge_skill[2]}
                    3Ô∏è‚É£ {data_rouge_skill[3]}
                    4Ô∏è‚É£ {data_rouge_skill[4]}
                    5Ô∏è‚É£ {data_rouge_skill[5]}
                    6Ô∏è‚É£ {data_rouge_skill[6]}
                    7Ô∏è‚É£ {data_rouge_skill[7]}
                    8Ô∏è‚É£ {data_rouge_skill[8]}
                    9Ô∏è‚É£ {data_rouge_skill[9]}
                    
                    ‚ú® –í—ã–±–µ—Ä–∏—Ç–µ *{data_rouge_skill[0]}* –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
                    üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1 3 4 7")
                    """),
                    parse_mode="Markdown"
                )
            else:
                await message.answer(
                f"üß© *–ù–∞–≤—ã–∫–∏ {textwrap.dedent(data['archetype'].lower())}* üß©\n"
                f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å —Ç–∞–∫–∏–º–∏ —É–º–µ–Ω–∏—è–º–∏:\n"
                f"{textwrap.dedent('\n'.join(f'‚Ä¢ *{skill}*' for skill in data_rouge_skill))}\n"
                f"–≠—Ç–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –≤ –ø–µ—Ä–≤—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö!\n",
                parse_mode="Markdown"
                )

                finish_text = '\n'.join(data_rouge_skill)
                await state.update_data({'rogue_skills': finish_text})
                await state.set_state(CreateHero.choosing_weapon_skill)

                await message.answer(
                textwrap.dedent(f"""
                    ‚öîÔ∏è *–û—Ä—É–∂–µ–π–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ {data['archetype'].upper()}* ‚öîÔ∏è
                    
                    –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –Ω–∞–≤—ã–∫ –≤–ª–∞–¥–µ–Ω–∏—è –æ—Ä—É–∂–∏–µ–º:
                    
                    1Ô∏è‚É£ {data_weapon_skill[1]}
                    2Ô∏è‚É£ {data_weapon_skill[2]}
                    3Ô∏è‚É£ {data_weapon_skill[3]}
                    4Ô∏è‚É£ {data_weapon_skill[4]}
                    
                    ‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç *1* –¥–æ *4*
                    üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2")
                    """),
                    parse_mode="Markdown"
                )

        except ValueError:
            await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n–ü—Ä–∏–º–µ—Ä: <b>3</b>", parse_mode="HTML")