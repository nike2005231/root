from aiogram.types import Message, ReplyKeyboardRemove
from keyboards.keyboards import tiz_keyboard
from aiogram.fsm.context import FSMContext
from states.state_change_hero import TizStats
from handlers.handlers_changes_stats.send_mes_all import send_message_all_users
from keyboards.keyboards import profile_keyboard

async def init_tiz(router, F, db, message):
    @router.message(F.text == "üîù –ò–∑–º–µ–Ω–∏—Ç—å –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —è—á–µ–π–∫–∏")
    async def capacity(message: Message, state: FSMContext):
        await message.answer(
            "üì¶ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —è—á–µ–µ–∫*\n\n"
            "–ù–∞–ø–∏—à–∏ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
            "`1` ‚Äî —Ç—Ä–∞–≤–º—ã, `2` ‚Äî –∏—Å—Ç–æ—â–µ–Ω–∏–µ, `3` ‚Äî –∑–∞—Ç—Ä–∞—Ç—ã\n"
            "_–ü—Ä–∏–º–µ—Ä: 1 5 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º —Ç—Ä–∞–≤–º 5_",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(TizStats.change_capacity)

    @router.message(TizStats.change_capacity)
    async def capacity_get(message: Message, state: FSMContext):
        parts = message.text.strip().split()

        if len(parts) != 2 or not all(p.isdigit() for p in parts):
            await message.reply("‚ùó –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2 5")
            return

        key, value = map(int, parts)

        if key not in (1, 2, 3):
            await message.reply("‚ùó –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 (—Ç—Ä–∞–≤–º—ã), 2 (–∏—Å—Ç–æ—â–µ–Ω–∏–µ) –∏–ª–∏ 3 (–∑–∞—Ç—Ä–∞—Ç—ã).")
            return
        if value > 6:
            await message.answer(f"‚ùóÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —è—á–µ–π–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ *6*", parse_mode="Markdown")
            return
        if value < 4:
            await message.answer(f"‚ùóÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —è—á–µ–π–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ *4*", parse_mode="Markdown")
            return
        column_map = {
            1: "max_injury",
            2: "max_depletion",
            3: "max_costs"
        }
        column = column_map[key]
        db.insert_data(
            value,
            message.chat.id,
            request=f'UPDATE character_status SET {column} = ? WHERE chat_id = ?'
        )

        name_user = db.get_data(message.chat.id, request='SELECT name FROM info WHERE chat_id == ?')[0][0]

        text = (
            f"üõ† <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{name_user}</code>\n"
            f"üìà –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{value}</code>"
        )

        await send_message_all_users(db=db, message=message, text=text, markup=profile_keyboard())
        await state.clear()

    @router.message(F.text == "üí¢ –ò–∑–º–µ–Ω–∏—Ç—å –¢—Ä–∞–≤–º—ã")
    async def change_injuries(message: Message, state: FSMContext):
        current_value = db.get_data(message.chat.id, request='select injury from character_status where chat_id == ?')[0][0]
        await message.answer(
            "ü©π *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ç—Ä–∞–≤–º*\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *{current_value}*\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ (0-Y):\n\n",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(TizStats.change_injuries)
    
    @router.message(TizStats.change_injuries)
    async def change_injuries_get(message: Message, state: FSMContext):
        try:
            new_injuries_value = int(message.text)
        except ValueError:
            await message.reply("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
            return

        current_value, max_value = db.get_data(message.chat.id, request='select injury, max_injury from character_status where chat_id == ?')[0]

        if new_injuries_value > max_value + 1:
            await message.answer(f"‚ùóÔ∏è –Ø—á–µ–π–∫–∞ —Ç—Ä–∞–≤–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ *{max_value + 1}*", parse_mode="Markdown")
            return

        db.insert_data(
            new_injuries_value,
            message.chat.id,
            request='UPDATE character_status SET injury = ? WHERE chat_id = ?'
        )
        name_user = db.get_data(message.chat.id, request='select name from info where chat_id == ?')[0][0]
        text = (
            f"ü©π <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Ç—Ä–∞–≤–º</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{name_user}</code>\n"
            f"üìä –ò–∑–º–µ–Ω–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∞–≤–º:\n"
            f"‚Ä¢ –ë—ã–ª–æ: <code>{current_value}</code>\n"
            f"‚Ä¢ –°—Ç–∞–ª–æ: <code>{new_injuries_value}</code>"
        )
        await send_message_all_users(db=db, message=message, text=text, markup=profile_keyboard())
        await state.clear()

    @router.message(F.text == "ü•µ –ò–∑–º–µ–Ω–∏—Ç—å –ò—Å—Ç–æ—â–µ–Ω–∏–µ")
    async def change_depletion(message: Message, state: FSMContext):
        current_value = db.get_data(message.chat.id, request='select depletion from character_status where chat_id == ?')[0][0]
        await message.answer(
            "üí§ *–ö–æ—Ä—Ä–µ–∫—Ü–∏—è —É—Ä–æ–≤–Ω—è –∏—Å—Ç–æ—â–µ–Ω–∏—è*\n\n"
            f"–¢–µ–∫—É—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: *{current_value}*\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(TizStats.change_depletion)

    @router.message(TizStats.change_depletion)
    async def change_depletion_get(message: Message, state: FSMContext):
        try:
            new_depletion_value = int(message.text)
        except ValueError:
            await message.reply("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
            return

        current_value, max_value = db.get_data(message.chat.id, request='select depletion, max_depletion from character_status where chat_id == ?')[0]
        
        if new_depletion_value > max_value + 1:
            await message.answer(f"‚ùóÔ∏è –Ø—á–µ–π–∫–∞ —Ç—Ä–∞–≤–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ *{max_value + 1}*", parse_mode="Markdown")
            return

        db.insert_data(
            new_depletion_value,
            message.chat.id,
            request='UPDATE character_status SET depletion = ? WHERE chat_id = ?'
        )
        name_user = db.get_data(message.chat.id, request='select name from info where chat_id == ?')[0][0]
        text = (
            f"ü•µ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∏—Å—Ç–æ—â–µ–Ω–∏—è</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{name_user}</code>\n"
            f"üìä –ò–∑–º–µ–Ω–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ç–æ—â–µ–Ω–∏—è:\n"
            f"‚Ä¢ –ë—ã–ª–æ: <code>{current_value}</code>\n"
            f"‚Ä¢ –°—Ç–∞–ª–æ: <code>{new_depletion_value}</code>"
        )
        await send_message_all_users(db=db, message=message, text=text, markup=profile_keyboard())
        await state.clear()

    @router.message(F.text == "üí∏ –ò–∑–º–µ–Ω–∏—Ç—å –ó–∞—Ç—Ä–∞—Ç—ã")
    async def change_costs(message: Message, state: FSMContext):
        current_value = db.get_data(message.chat.id, request='select costs from character_status where chat_id == ?')[0][0]
        await message.answer(
            "üíé *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏*\n\n"
            f"‚úèÔ∏è –¢–µ–∫—É—â–∏–π –∑–Ω–∞—á–µ–Ω–∏–µ: *{current_value}*\n\n"
            "üì• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(TizStats.change_costs)

    @router.message(TizStats.change_costs)
    async def change_costs_get(message: Message, state: FSMContext):
        try:
            new_costs_value = int(message.text)
        except ValueError:
            await message.reply("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
            return

        current_value, max_value = db.get_data(message.chat.id, request='select costs, max_costs from character_status where chat_id == ?')[0]

        if new_costs_value > max_value + 1:
            await message.answer(f"‚ùóÔ∏è –Ø—á–µ–π–∫–∞ —Ç—Ä–∞–≤–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ *{max_value + 1}*", parse_mode="Markdown")
            return

        db.insert_data(
            new_costs_value,
            message.chat.id,
            request='UPDATE character_status SET costs = ? WHERE chat_id = ?'
        )
        name_user = db.get_data(message.chat.id, request='select name from info where chat_id == ?')[0][0]
        text = (
            f"üí∏ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–∞—Ç—Ä–∞—Ç</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{name_user}</code>\n"
            f"üìä –ò–∑–º–µ–Ω–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç:\n"
            f"‚Ä¢ –ë—ã–ª–æ: <code>{current_value}</code>\n"
            f"‚Ä¢ –°—Ç–∞–ª–æ: <code>{new_costs_value}</code>"
        )
        await send_message_all_users(db=db, message=message, text=text, markup=profile_keyboard())
        await state.clear()