from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from states.state_change_hero import CommunicateState, DeleteCommunicate
from keyboards.keyboards import profile_keyboard, change_communications_keyboard, history_keyboard, choice_communications_keyboard
from handlers.handlers_changes_stats.send_mes_all import send_message_all_users
import json

async def init_history(router, F, db, message):
    @router.message(F.text == "üßæ –°–ø—Ä–∞–≤–∫–∞")
    async def reference(message: Message, state: FSMContext):
        connections_info = (
            "*–î—Ä—É–≥*:\n"
            "–ï—Å–ª–∏ –ü–ò –ø–æ–º–æ–≥–∞–µ—Ç —Ç–æ–º—É, —Å –∫–µ–º —Å–≤—è–∑–∞–Ω, —Ç–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∏–º –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å 2 –∏—Å—Ç–æ—â–µ–Ω–∏—è, "
            "—á—Ç–æ–±—ã –ø—Ä–∏–±–∞–≤–∏—Ç—å –∫ –±—Ä–æ—Å–∫–∞–º +2, –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å 1 –∏—Å—Ç–æ—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–±–∞–≤–∏—Ç—å +1.\n\n"
            
            "*–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª*:\n"
            "–ï—Å–ª–∏ –ü–ò –¥–µ–ª–∏—Ç—Å—è —Å —Ç–µ–º, —Å –∫–µ–º —Å–≤—è–∑–∞–Ω, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –æ–±–∞ –ø–æ–ª—É—á–∞—é—Ç +1 "
            "–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –±—Ä–æ—Å–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤. –ï—Å–ª–∏ –ü–ò –ø–æ–º–æ–≥–∞–µ—Ç —Ç–æ–º—É, —Å –∫–µ–º —Å–≤—è–∑–∞–Ω, –≤—ã–ø–æ–ª–Ω–∏—Ç—å "
            "–ø–ª—É—Ç–æ–≤—Å–∫–æ–π –ø—Ä–∏—ë–º, —Ç–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∏–≥—Ä–æ–∫ –æ—Ç–º–µ—á–∞–µ—Ç –µ–º—É –æ–¥–Ω–æ –∏—Å—Ç–æ—â–µ–Ω–∏–µ, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ –≤—Ä–µ–º—è –ø–æ–º–æ—â–∏, "
            "–∫–∞–∫ –µ—Å–ª–∏ –±—ã –æ—Ç–º–µ—Ç–∏–ª –¥–≤–∞ –∏—Å—Ç–æ—â–µ–Ω–∏—è.\n\n"
            
            "*–°–µ–º—å—è*:\n"
            "–ï—Å–ª–∏ –ü–ò –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ç–æ–º—É, —Å –∫–µ–º –æ–Ω —Å–≤—è–∑–∞–Ω, –æ–±–∞ –º–æ–≥—É—Ç –æ—á–∏—Å—Ç–∏—Ç—å —à–∫–∞–ª—ã –∏—Å—Ç–æ—â–µ–Ω–∏—è.\n\n"
            
            "*–ü–∞—Ä—Ç–Ω–µ—Ä*:\n"
            "–í—ã–±—Ä–∞–≤ —ç—Ç—É —Å–≤—è–∑—å, –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –∏ –¥—Ä—É–≥–æ–π, —Å –ü–ò –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–≤—è–∑–∞–Ω –ü–ò –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –¥–æ–ª–∂–Ω—ã –æ—Ç–º–µ—Ç–∏—Ç—å 2 —è—á–µ–π–∫–∏ "
            "–ø—Ä–µ—Å—Ç–∏–∂–∞ —É —Ñ—Ä–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–π –ø–æ–º–æ–≥ –ø–µ—Ä–≤—ã–π –ü–ò, –∏ 2 —è—á–µ–π–∫–∏ –¥—É—Ä–Ω–æ–π —Å–ª–∞–≤—ã —É —Ñ—Ä–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –Ω–∞–≤—Ä–µ–¥–∏–ª. "
            "–ï—Å–ª–∏ –æ–±–æ–∏—Ö –ü–ò –∑–∞–º–µ—Ç—è—Ç –≤–º–µ—Å—Ç–µ, –∏ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Å—Ç–∏–∂ –∏–ª–∏ –¥—É—Ä–Ω—É—é —Å–ª–∞–≤—É —É —ç—Ç–∏—Ö "
            "—Ñ—Ä–∞–∫—Ü–∏–π, —Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ —É–¥–≤–æ—è—Ç—Å—è.\n\n"
            
            "*–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å*:\n"
            "–ï—Å–ª–∏ –ü–ò –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–Ω—è—Ç—å —Ç–æ–≥–æ, —Å –∫–µ–º —Å–≤—è–∑–∞–Ω, —Ç–æ –∏–≥—Ä–æ–∫, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —ç—Ç–∏–º –ü–ò, –ø–æ–ª—É—á–∞–µ—Ç 1 –æ—á–∫–æ –∑–∞–ø–∞—Å–∞, "
            "–¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ. –ö–æ–≥–¥–∞ —ç—Ç–æ—Ç –ü–ò —É–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Ç–æ–≥–æ, —Å –∫–µ–º —Å–≤—è–∑–∞–Ω, —Ç–æ –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å –µ–º—É –æ—á–∏—Å—Ç–∏—Ç—å 2 "
            "–∏—Å—Ç–æ—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ 1.\n\n"
            
            "*–ó–∞—â–∏—Ç–Ω–∏–∫*:\n"
            "–ö–æ–≥–¥–∞ –∑–∞—â–∏—â–∞–µ–º—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∞, –∏–≥—Ä–æ–∫, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∑–∞—â–∏—Ç–Ω–∏–∫–æ–º, –º–æ–∂–µ—Ç "
            "–æ—Ç–º–µ—Ç–∏—Ç—å –∏—Å—Ç–æ—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫—É, —á—Ç–æ–±—ã —Ç–æ—Ç –ø—Ä–∏–Ω—è–ª –Ω–∞ —Å–µ–±—è —É–¥–∞—Ä, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∑–∞—â–∏—â–∞–µ–º–æ–º—É. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ "
            "–¥–æ –∫–æ–Ω—Ü–∞ —Å—Ü–µ–Ω—ã –∑–∞—â–∏—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç +1 –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –±—Ä–æ—Å–∫–æ–≤ –æ—Ä—É–∂–µ–π–Ω—ã—Ö —Ö–æ–¥–æ–≤."
        )
        await message.answer(connections_info, parse_mode="Markdown", reply_markup=history_keyboard())

    @router.message(F.text == "üåê –°–≤—è–∑–∏")
    async def change_communicate(message: Message, state: FSMContext):
        await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', parse_mode="Markdown", reply_markup=change_communications_keyboard())

    @router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å")
    async def add_communicate(message: Message, state: FSMContext):
        MAXIMUM_CONNECTIONS = 6
        data = db.get_data(message.chat.id, request='SELECT role, name FROM communications WHERE chat_id = ?')      
        
        if len(data) >= MAXIMUM_CONNECTIONS:
            await message.answer(
                '‚ö†Ô∏è *–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–≤—è–∑–µ–π*\n\n'
                '–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ *–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ* (6) ‚Äì –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è.\n'
                '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–≤—è–∑—å, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—Ç–∞—Ä—ã—Ö.',  
                parse_mode="Markdown",  
                reply_markup=history_keyboard()  
            )
        else:
            await message.answer(
                '*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–≤—è–∑—å*',
                parse_mode="Markdown",  
                reply_markup=choice_communications_keyboard()  
            )

    async def record_communicate(role: str, name: str):
        try:
            db.insert_data(message.chat.id, role, name, request='insert into communications (chat_id, role, name) values (?, ?, ?)')
        except Exception as ex:
            print(f'–û—à–∏–±–∫–∞ - {ex}')
            
    async def add_communication_handler(message: Message, state: FSMContext, state_class):
        await message.answer(
            '*–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è:*',
            parse_mode="Markdown",  
            reply_markup=ReplyKeyboardRemove()  
        )
        await state.set_state(state_class)
    
    generate_handlers = [
        ["üë• –î—Ä—É–≥–∞", "üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞", "üè† –°–µ–º—å—é", "‚ù§Ô∏è –ü–∞—Ä—Ç–Ω—ë—Ä–∞", "üëÄ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—è", "üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫–∞"], 
        [CommunicateState.add_friend, CommunicateState.add_professional, CommunicateState.add_family, CommunicateState.add_partner, CommunicateState.add_observer, CommunicateState.add_protector],
        ['–¥—Ä—É–≥', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', '—Å–µ–º—å—è', '–ø–∞—Ä—Ç–Ω–µ—Ä', '–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å', '–∑–∞—â–∏—Ç–Ω–∏–∫']
    ]

    def create_handler(name, name_state, rename_record):
        @router.message(F.text == name)
        async def add_communicate(message: Message, state: FSMContext):
            await add_communication_handler(message, state, name_state)

        @router.message(name_state)
        async def add_guardian(message: Message, state: FSMContext):
            name = message.text
            existing_names = {row[0] for row in db.get_data(message.chat.id, request='SELECT name FROM communications WHERE chat_id = ?')}
            if name in existing_names:
                await message.answer('–û–¥–Ω–æ –∏–º—è, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥–≤—É—Ö —Å–≤—è–∑—è—Ö!!!')
                return
            text = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{message.chat.first_name}</code>\n"
                f"–î–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é —Å–≤—è–∑—å:\n"
                f"<code>{rename_record} - {name}</code>\n"
            )
            await send_message_all_users(db=db, message=message, text=text, markup=history_keyboard())

            await record_communicate(rename_record, name)
            await state.clear()
    
    for name, name_state, rename_record in zip(*generate_handlers):
        create_handler(name, name_state, rename_record)

    @router.message(F.text == "‚ûñ –£–±—Ä–∞—Ç—å —Å–≤—è–∑—å")
    async def delete_communicate(message: Message, state: FSMContext):
        data = db.get_data(message.chat.id, request='SELECT * FROM communications WHERE chat_id = ?')
        if not data:
            await message.answer('*–°–≤—è–∑–µ–π –Ω–µ—Ç*', parse_mode="Markdown") 
        else:
            async def generated_keyboards_communications(data: list):
                if data:
                    keyboard = [[KeyboardButton(text=f'{item[2]} - {item[3]}')] for item in data]
                    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤—è–∑—å –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=ReplyKeyboardMarkup(keyboard = keyboard, resize_keyboard=True))
                    await state.set_state(DeleteCommunicate.delete)
            await generated_keyboards_communications(data=data)

    @router.message(DeleteCommunicate.delete, F.text.regexp(r'^(.+?) - (.+)$'))
    async def handle_delete_in_state(message: Message, state: FSMContext):
        role, name = message.text.split(' - ') # –°–í–Ø–ó–¨ - –ò–ú–Ø
        
        db.insert_data(message.chat.id, role, name, request='delete from communications where chat_id = ? and role = ? and name = ?')
        text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{message.chat.first_name}</code>\n"
            f"–°—Ç–µ—Ä —Å–≤—è–∑—å:\n"
            f"<code>{role} - {name}</code>\n"
        )
        await send_message_all_users(db=db, message=message, text=text, markup=history_keyboard())
        await state.clear()