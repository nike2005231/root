from aiogram.types import Message
import random
from keyboards.keyboards import tiz_keyboard, check_keyboard, menu_keyboard, inventory_keyboard, fractions_keyboard, skills_keyboard
from handlers.handlers_changes_stats.tiz_handlers import init_tiz
from handlers.handlers_changes_stats.fractions_handlers import init_fractions
from handlers.handlers_changes_stats.inventory import init_inventory
from handlers.handlers_changes_stats.skills import init_skills

async def init_hero_changes_stats(router, F, db, message):
    @router.message(F.text == "üíâ –Ø—á–µ–π–∫–∏ –¢–ò–ó")
    async def show_injuries(message: Message):
        data = db.get_data(message.chat.id, request='SELECT injury, depletion, costs, max_injury, max_depletion, max_costs FROM character_status WHERE chat_id = ?')
        if data:
            injury, depletion, costs, max_i, max_d, max_c = data[0]

            if injury >= max_i:
                injury_roast = random.choice(["–¢—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–∑–¥—ã—Ö–∞–Ω–∏–∏!", "–¢–µ–±–µ –Ω—É–∂–µ–Ω –ª–µ–∫–∞—Ä—å... –°–†–û–ß–ù–û!", "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã —Ä–∞–∑–≤–∞–ª–∏–≤–∞–µ—à—å—Å—è."])
            elif injury > max_i / 2:
                injury_roast = random.choice(["–ü–æ—Ç—Ä–µ–ø–∞–Ω–Ω—ã–π, –Ω–æ –µ—â—ë —Å—Ç–æ–∏—à—å.", "–ù–µ–º–Ω–æ–≥–æ –ø–æ–±–∏—Ç—ã–π –∂–∏–∑–Ω—å—é.", "–ë–æ–µ–≤—ã–µ —à—Ä–∞–º—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ—É–∫–ª—é–∂–∏–π?"])
            else:
                injury_roast = random.choice(["–ï—â—ë —Ü–µ–ª!", "–ù–µ–ø–ª–æ—Ö–æ, –Ω–µ —Ä–∞–∑–≤–∞–ª–∏–ª—Å—è –ø–æ–∫–∞.", "–¢—ã –µ—â—ë –¥–∞–∂–µ –Ω–µ –ø–æ—Ü–∞—Ä–∞–ø–∞–Ω!"])

            if depletion >= max_d:
                depletion_roast = random.choice(["–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –∫–∞–∫ –±—É–ª—ã–≥–∞ –ø–æ—Å–ª–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ—è.", "–í–∞–ª–∏—à—å—Å—è —Å –Ω–æ–≥?", "–¢–µ–±—è –±—ã —Å–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ø–∞—Ç—å."])
            elif depletion > max_d / 2:
                depletion_roast = random.choice(["–£—Å—Ç–∞–ª –∫–∞–∫ —Å–æ–±–∞–∫–∞?", "–ë–∞—Ç–∞—Ä–µ–π–∫–∞ —Å–∞–¥–∏—Ç—Å—è.", "–ù–µ–º–Ω–æ–≥–æ –≤—ã–º–æ—Ç–∞–Ω."])
            else:
                depletion_roast = random.choice(["–ë–æ–¥—Ä –∫–∞–∫ –æ–≥—É—Ä—á–∏–∫!", "–ü–æ–ª–æ–Ω —Å–∏–ª!", "–≠–Ω–µ—Ä–≥–∏–∏ —Ö–æ—Ç—å –æ—Ç–±–∞–≤–ª—è–π."])

            if costs >= max_c:
                costs_roast = random.choice(["–ë–ª—è, —Ç—ã –±–∞–Ω–∫—Ä–æ—Ç.", "–î–µ–Ω—å–≥–∏? –ß—Ç–æ —ç—Ç–æ?", "–í–µ—Ç–µ—Ä —Å–≤–∏—Å—Ç–∏—Ç –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö."])
            elif costs > max_c / 2:
                costs_roast = random.choice(["–ü–æ—á—Ç–∏ –Ω–∞ –º–µ–ª–∏.", "–¢—è–∂–µ–ª–æ–≤–∞—Ç–æ —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.", "–ñ–∏–≤—ë—à—å –Ω–∞ –¥–æ—à–∏—Ä–∞–∫–µ?"])
            else:
                costs_roast = random.choice(["–î–µ–Ω–µ–≥ –∫—É—Ä—ã –Ω–µ –∫–ª—é—é—Ç!", "–ù–∞ –∫–æ–Ω–µ!", "–ú–æ–∂–Ω–æ –∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å—Å—è."])

            response = (
                "üî¥ *–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:*\n\n"
                f"üí¢ *–¢—Ä–∞–≤–º—ã:* {injury}/{max_i} ‚Äì _{injury_roast}_\n"
                f"ü•µ *–ò—Å—Ç–æ—â–µ–Ω–∏–µ:* {depletion}/{max_d} ‚Äì _{depletion_roast}_\n"
                f"üí∏ *–ó–∞—Ç—Ä–∞—Ç—ã:* {costs}/{max_c} ‚Äì _{costs_roast}_"
            )
            await init_tiz(router=router, F=F, db=db, message=message)
            await message.answer(response, parse_mode="Markdown", reply_markup=tiz_keyboard())
            

    @router.message(F.text == "üìö –ù–∞–≤—ã–∫–∏")
    async def show_skills(message: Message):
        data = db.get_data(message.chat.id, request='SELECT rogue_skills, weapon_skill, moves FROM skills WHERE chat_id = ?')
        if data:
            rogue, weapon, moves = data[0]

            response = (
                "üìö *–ù–∞–≤—ã–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:*\n\n"
                f"ü¶π *–í–æ—Ä–æ–≤—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏:*\n{rogue or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"‚öîÔ∏è *–ë–æ–µ–≤–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ:*\n{weapon or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üèÉ *–•–æ–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:*\n{moves or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
            )
            await message.answer(response, parse_mode="Markdown")

    @router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
    async def show_history(message: Message):
        data = db.get_data(message.chat.id, request='SELECT name, species, features, behavior, home, reason, left_behind, communications, motives FROM info WHERE chat_id = ?')
        if data:
            (name, species, features, behavior, home, reason, left, comm, motives) = data[0]

            response = (
                "üìñ *–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:*\n\n"
                f"üìõ *–ò–º—è:* {name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üß¨ *–í–∏–¥:* {species or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üé≠ *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:* {features or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üíÉ *–ú–∞–Ω–µ—Ä—ã:* {behavior or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üè† *–†–æ–¥–Ω–æ–π –∫—Ä–∞–π:*\n{home or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"‚ùì *–ü—Ä–∏—á–∏–Ω–∞ —Å—Ç—Ä–∞–Ω—Å—Ç–≤–∏–π:*\n{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üë£ *–û—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–∑–∞–¥–∏:*\n{left or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üìû *–°–≤—è–∑–∏:*\n{comm or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üí´ *–ú–æ—Ç–∏–≤–∞—Ü–∏—è:*\n*–†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç*\n{motives or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
            )
            await message.answer(response, parse_mode="Markdown")

    @router.message(F.text == "‚ú® –°–∫–∏–ª–ª—ã")
    async def show_stats(message: Message):
        data = db.get_data(message.chat.id, request='SELECT power, agility, luck, cunning, charm FROM stats WHERE chat_id = ?')
        if data:
            (power, agi, luck, cunning, charm) = data[0]

            power_roast = random.choice(["–¢—ã —Ö–æ—Ç—è –±—ã –±–∞–Ω–∫—É –æ—Ç–∫—Ä—ã—Ç—å –º–æ–∂–µ—à—å?", "–î—Ä—ã—â."]) if power <= 0 else (random.choice(["–ù—É –ª–∞–¥–Ω–æ, –∫–∞—á–æ–∫.", "–°–∏–ª–∞—á!"]) if power >= 2 else random.choice(["–°—Ä–µ–¥–Ω—è—á–æ–∫.", "–ù–µ –¥—Ä—ã—â –∏ –Ω–µ –∫–∞—á–æ–∫."]))
            agi_roast = random.choice(["–ù–µ –ø–∏–∑–¥–∞–Ω–∏—Å—å", "–¢–æ—Ä–º–æ–∑."]) if agi <= 0 else (random.choice(["–°–∞—Å–∫–µ –≤–µ—Ä–Ω–∏—Å—å –≤ –ö–æ–Ω–æ—Ö—É.", "–®—É—Å—Ç—Ä—ã–π!"]) if agi >= 2 else random.choice(["–î–≤–∏–≥–∞–µ—à—å—Å—è.", "–ù–µ—É–∫–ª—é–∂–∏–π, –Ω–æ –Ω–µ —Å–æ–≤—Å–µ–º."]))
            luck_roast = random.choice(["–¢–µ–±–µ –±—ã –≤ –∫–∞–∑–∏–Ω–æ –Ω–µ —Ö–æ–¥–∏—Ç—å.", "–ù–µ—É–¥–∞—á–Ω–∏–∫."]) if luck <= 0 else (random.choice(["–í–µ–∑—É—á–∏–π —É—ë–±–æ–∫.", "–°–æ—Ä–≤–∞–ª –∫—É—à!"]) if luck >= 2 else random.choice(["–¢–∞–∫ —Å–µ–±–µ —É–¥–∞—á–∞.", "–ù–µ–≤–µ–∑–µ–Ω–∏–µ –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç."]))
            cunning_roast = random.choice(["–ü—Ñ—Ñ* —Å–∞–º —Å–µ–±—è –Ω–µ –Ω–∞–µ–±–∏ ", "–¢—É–ø–µ–Ω—å."]) if cunning <= 0 else (random.choice(["–ê —Ç—ã —É–º–µ–µ—à—å –ø–∏–∑–¥–µ—Ç—å.", "–•–∏—Ç—Ä—é–≥–∞!"]) if cunning >= 2 else random.choice(["–ß—Ç–æ-—Ç–æ –º—É—Ç–∏—à—å.", "–ù–µ —Å–µ–º–∏ –ø—è–¥–µ–π –≤–æ –ª–±—É."]))
            charm_roast = random.choice(["–¢–µ–±—è –ª—é–¥–∏ —Ç–µ—Ä–ø—è—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏.", "–°—Ç—Ä–∞—à–∏–ª–∞."]) if charm <= 0 else (random.choice(["–•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –º—É–¥–∞–∫.", "–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏!"]) if charm >= 2 else random.choice(["–ù–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ—à—å, –∏ —Ç–æ —Ö–æ—Ä–æ—à–æ.", "–ü—Ä–∏—è—Ç–Ω—ã–π –≤ –æ–±—â–µ–Ω–∏–∏... –∏–Ω–æ–≥–¥–∞."]))

            response = (
                "‚ú® *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:*\n\n"
                f"üí™ *–ú–æ—â—å:* {power} ‚Äì _{power_roast}_\n"
                f"üèπ *–õ–æ–≤–∫–æ—Å—Ç—å:* {agi} ‚Äì _{agi_roast}_\n"
                f"üçÄ *–£–¥–∞—á–∞:* {luck} ‚Äì _{luck_roast}_\n"
                f"ü¶ä *–•–∏—Ç—Ä–æ—Å—Ç—å:* {cunning} ‚Äì _{cunning_roast}_\n"
                f"üåü *–•–∞—Ä–∏–∑–º–∞:* {charm} ‚Äì _{charm_roast}_"
            )
            await init_skills(router=router, F=F, db=db, message=message)
            await message.answer(response, parse_mode="Markdown", reply_markup=skills_keyboard())

    @router.message(F.text == "üèõ –û—Ç–Ω–æ—à–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π")
    async def show_fractions(message: Message):
        data = db.get_data(message.chat.id, request='''
            SELECT
                marquisate_rep, winged_dynasties_rep,
                forest_alliance_rep, woodland_folk_rep,
                marquisate_prestige_p, winged_dynasties_prestige_p,
                forest_alliance_prestige_p, woodland_folk_prestige_p,
                marquisate_prestige_m, winged_dynasties_prestige_m,
                forest_alliance_prestige_m, woodland_folk_prestige_m
            FROM fractions WHERE chat_id = ?
        ''')
        if data:
            (m_rep, wd_rep, fa_rep, wf_rep, m_pr, wd_pr, fa_pr, wf_pr, m_pr_m, wd_pr_m, fa_pr_m, wf_pr_m) = data[0]

            response = (
                "üè∞ *–§—Ä–∞–∫—Ü–∏–∏ –∏ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è* üè∞\n\n"
                
                f"üëë *–ú–∞—Ä–∫–∏–∑–∞—Ç*\n"
                f"‚îú –†–µ–ø—É—Ç–∞—Ü–∏—è: {'+' if m_rep > 0 else ''}{m_rep}\n"
                f"‚îú –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Ç–∏–∂: {m_pr}\n"
                f"‚îî –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Ç–∏–∂: {m_pr_m}\n\n"
                
                f"ü¶Ö *–ö—Ä—ã–ª–∞—Ç—ã–µ –î–∏–Ω–∞—Å—Ç–∏–∏*\n"
                f"‚îú –†–µ–ø—É—Ç–∞—Ü–∏—è: {'+' if wd_rep > 0 else ''}{wd_rep}\n"
                f"‚îú –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Ç–∏–∂: {wd_pr}\n"
                f"‚îî –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Ç–∏–∂: {wd_pr_m}\n\n"
                
                f"üå≥ *–õ–µ—Å–Ω–æ–π –ê–ª—å—è–Ω—Å*\n"
                f"‚îú –†–µ–ø—É—Ç–∞—Ü–∏—è: {'+' if fa_rep > 0 else ''}{fa_rep}\n"
                f"‚îú –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Ç–∏–∂: {fa_pr}\n"
                f"‚îî –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Ç–∏–∂: {fa_pr_m}\n\n"
                
                f"üçÑ *–õ–µ—Å–Ω–æ–π –ù–∞—Ä–æ–¥*\n"
                f"‚îú –†–µ–ø—É—Ç–∞—Ü–∏—è: {'+' if wf_rep > 0 else ''}{wf_rep}\n"
                f"‚îú –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Ç–∏–∂: {wf_pr}\n"
                f"‚îî –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Ç–∏–∂: {wf_pr_m}\n\n"
                
                "\n‚ÑπÔ∏è *–ø/–º* - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Å—Ç–∏–∂"
            )

            await init_fractions(router=router, F=F, db=db, message=message)
            await message.answer(response, parse_mode="Markdown", reply_markup=fractions_keyboard())

    @router.message(F.text == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
    async def show_inventory(message: Message):
        data = db.get_data(message.chat.id, request='SELECT money, items FROM inventory WHERE chat_id = ?')
        if data:
            money, items = data[0]

            response = (
                "üéí *–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:*\n\n"
                f"üí∞ *–î–µ–Ω—å–≥–∏:* {money or 0} —à–º–µ–∫–µ–ª–µ–π\n\n"
                f"üì¶ *–ü—Ä–µ–¥–º–µ—Ç—ã:*\n{items or '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç'}"
            )
            await init_inventory(router=router, F=F, db=db, message=message)
            await message.answer(response, parse_mode="Markdown", reply_markup=inventory_keyboard())
            

    #–ë—É–¥–µ—Ç —Ç—É—Ç —è —Ö—É–π –∑–Ω–∞–µ—Ç –∫—É–¥–∞ –µ–≥–æ –µ—â–µ –ø–∏—Ö–Ω—É—Ç—å
    @router.message(F.text == "üíî –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    async def clear_bd(message: Message):

        await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?", reply_markup=check_keyboard())

        @router.message(F.text == "‚úÖ –î–∞")
        async def back_menu(message: Message): 
            try:
                chat_id = message.chat.id
                
                tables = [
                    'info',
                    'character_status',
                    'inventory',
                    'fractions',
                    'stats',
                    'skills'
                ]
                
                for table in tables:
                    db.insert_data(chat_id, request=f"DELETE FROM {table} WHERE chat_id = ?")

                await message.answer("üíÄ –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.", reply_markup=menu_keyboard())
            
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {str(e)}")
        
        @router.message(F.text == "‚ùå –ù–µ—Ç")
        async def back_menu(message: Message):
            await message.answer("üè† –í—ã –≤ –º–µ–Ω—é", reply_markup=menu_keyboard())